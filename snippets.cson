# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
'.source.jbase':
  'CBP':
    'prefix': 'CBP'
    'body': """
    *REPLACE_PROGRAM_NAME_HERE
    * JWGIV - DATE
    * ENTER PRIOR DATE, INITIALS, COMMENTS HERE
    ****************************************
    * STOUT BROTHERS CO., INC.
    *
    * COPYRIGHT (c) 2017 ALL RIGHTS RESERVED
    ****************************************
    $INCLUDE IICOMM
    $INCLUDE IINITCOMM
    PROMPT ''
    *****************
    **START PROGRAM**
    *****************
    ${1:/* start here */}
    ****************
    ***END PROGRAM**
    ****************
    STOP
    $INCLUDE IIBOTTOM
    END
    * ENTER DATE, INITIALS, COMMENTS HERE
    """
  'WBP':
    'prefix': 'WBP'
    'body': """
    *SUBROUTINE NAME_HERE
    * JWGIV - DATE
    * ENTER PRIOR DATE, INITIALS, COMMENTS HERE
    ****************************************
    * STOUT BROTHERS CO., INC.
    *
    * COPYRIGHT (c) 2017 ALL RIGHTS RESERVED
    ****************************************
    $INCLUDE WWIZ.INCLUDE WIZCOMMON
    VM = CHAR(253)
    AM = CHAR(254)
    *****************
    **START PROGRAM**
    *****************
    /* start here */
    ****************
    ***END PROGRAM**
    ****************
    END
    * ENTER DATE, INITIALS, COMMENTS HERE
    """
  'CASE':
    'prefix': 'ca'
    'body': 'BEGIN CASE\n\tCASE ${1:/* expression statement(s) */}\n\t\t${2:/* statement(s) */}\n\tCASE 1\n\t\t${3:/* default */}\nEND CASE'
  'CONVERT':
    'prefix': 'convert'
    'body': 'CONVERT "${1:/* expression1 */}" TO "${2:/* expression2 */}" IN ${3:/* expression3 */}'
  'DATE':
    'prefix': 'date'
    'body': 'DATE()'
  'DEFFUN':
    'prefix': 'deffun'
    'body': 'DEFFUN ${1:/* FuncName */}()'
  'DISPLAY':
    'prefix': 'display'
    'body': 'DISPLAY ${1:/* expression */}'
  'ELSE':
    'prefix': 'ELSE'
    'body': """
      ELSE
        ${1:/* expression */}
      END
    """
  'EQUATE':
    'prefix': 'equate'
    'body': 'EQUATE ${1:/* symbol */} TO ${2:/* expression */}'
  'EXECUTE':
    'prefix': 'execute'
    'body': 'EXECUTE ${1:/* expression */} RETURNING TMP CAPTURING Error'
  'FIELD':
    'prefix': 'field'
    'body': 'FIELD(${1:/* string */}, "${2:/* delimiter */}", ${3:/* numeric position */})'
  'FIND':
    'prefix': 'find'
    'body': 'FIND ${1:/* expression1 */} IN ${2:/* expression2 */} SETTING PRT THEN\n\t${3:/* statement */}\nEND'
  'FIND ELSE':
    'prefix': 'finde'
    'body': 'FIND ${1:/* expression1 */} IN ${2:/* expression2 */} SETTING PRT THEN\n\t${3:/* statement1 */}\nEND ELSE\n\t${4:/* statement2 */}\nEND'
  'FINDSTR':
    'prefix': 'findstr'
    'body': 'FINDSTR ${1:/* expression1 */} IN ${2:/* expression2 */} SETTING PRT THEN\n${3:/* statement */}\nEND'
  'FINDSTR ELSE':
    'prefix': 'findstre'
    'body': 'FINDSTR ${1:/* expression1 */} IN ${2:/* expression2 */} SETTING Ap THEN\n\t${3:/* statement1 */}\nEND ELSE\n\t${4:/* statement2 */}\nEND'
  'FOR':
    'prefix': 'for'
    'body': """
      FOR I = ${1:/* start */} TO ${2:/* end */}
        ${3:/* statement */}
      NEXT I
      """
  'FUNCTION':
    'prefix': 'function'
    'body': 'FUCNTION ${1:/* name */}(${2:/* variable(s) */})\n\t${3:/* statement(s) */}\n\tRETURN(${4:/* result(s) */})'
  'GOSUB':
    'prefix': 'gosub'
    'body': 'GOSUB ${1:/* label */}'
  'ICONV':
    'prefix': 'iconv'
    'body': 'ICONV(${1:/* expression1 */}, ${2:/* expression2 */})'
  'IF Condition':
    'prefix': 'if'
    'body': 'IF ${1:/* expression */} THEN\n\t${2:/* statement */}\nEND'
  'IF ELSE':
    'prefix': 'ife'
    'body': 'IF ${1:/* expression */} THEN\n\t${2:/* statement1 */}\nEND ELSE\n\t${3:/* statement2 */}\nEND'
  'LEFT':
    'prefix': 'left'
    'body': 'LEFT(${1:/* expression */}, ${2:/* length */})'
  'LEN':
    'prefix': 'length'
    'body': 'LEN(${1:/* expression */})'
  'LOOP WHILE':
      'prefix': 'loopwhile'
      'body': 'LOOP\n\t${1:/* statement1 */}\nWHILE ${2:/* expression */}\n\t${3:/* statement2 */}\nREPEAT'
  'LOOP UNTIL':
      'prefix': 'loopuntil'
      'body': 'LOOP\n\t${1:/* statement1 */}\nUNTIL ${2:/* expression */}\n\t${3:/* statement2 */}\nREPEAT'
  'MSLEEP':
    'prefix': 'msleep'
    'body': 'MSLEEP ${1:/* milliseconds */}'
  'NUM':
    'prefix': 'num'
    'body': 'NUM(${1:/* expression */})'
  'OCONV':
    'prefix': 'oconv'
    'body': 'OCONV(${1:/* expression1 */}, ${2:/* expression2 */})'
  'OPEN':
    'prefix': 'open'
    'body': 'OPEN \'${1:/* expression1 */}\' TO ${1:/* expression1 */} ELSE GO 910'
  'OPENSEQ':
    'prefix': 'openseq'
    'body': 'OPENSEQ ${1:/* pathFrom(File) */} TO ${2:/* pathTo(FileVar) */} ELSE\nEND\n\n\t${5:/* statement */}\n\nCLOSESEQ ${2:/* pathTo(FileVar) */}'
  'PRECISION':
    'prefix': 'precision'
    'body': 'PRECISION ${1:/* integer */}'
  'READ':
    'prefix': 'read'
    'body': 'READ ${1:/* variable1 */} FROM ${2:/* variable2 */}, ${3:/* expression */}'
  'READNEXT':
    'prefix': 'readnext'
    'body': """
      READNEXT ${1:/* variable */} THEN
        ${2:/* statement */}
      END
    """
  'READSEQ':
    'prefix': 'readseq'
    'body': 'READSEQ ${1:/* variable ex:line */} FROM ${2:/* pathTo(FileVar) */} THEN\n\t${3:/* statement(s) */}\nEND'
  'READU':
    'prefix': 'readu'
    'body': 'READU ${1:/* variable1 */} FROM ${2:/* variable2 */}, ${3:/* expression */} SETTING ${4:/* setvar */} ON ERROR'
  'READV':
    'prefix': 'readv'
    'body': 'READV ${1:/* variable1 */} FROM ${2:/* variable2 */}, ${3:/* expression1 */}, ${4:/* expression2 */} THEN\n\t${5:/* code */}\nEND'
  'SLEEP':
    'prefix': 'sleep'
    'body': 'SLEEP ${1:/* seconds or time ex: 4 or "14:00" */}'
  'Subroutine':
    'prefix': 'subroutine'
    'body': '${1:/* label */}:\n\t${2:/* statement */}\nRETURN'
  'SUBSTRINGs':
    'prefix': 'substrings'
    'body' : 'SUBSTRINGS (${1:/* DynArr */}, ${2:/* Start */}, ${3:/* Length */})'
  'SQUOTE':
    'prefix': 'squote'
    'body': 'SQUOTE(${1:/* expression */})'
  'THEN':
    'prefix': 'THEN'
    'body': """
      THEN
        ${1:/* expression */}
      END
    """
  'TRIM':
    'prefix': 'trim'
    'body': 'TRIM(${1:/* expression1 */}, "${2:/* expression2 */}", "${3:/* expression3 */}")'
  'UPCASE':
    'prefix': 'upcase'
    'body': 'UPCASE(${1:/* expression */})'
  'WRITELIST':
    'prefix': 'writelist'
    'body': 'WRITELIST ${1:/* variable */} ON ${2:/* expression */}'
  'WRITEU':
    'prefix': 'writeu'
    'body': 'WRITEU ${1:/* variable1 */} TO ${2:/* variable2 */}, ${3:/* expression */} SETTING ${4:/* setvar */} ON ERROR'
